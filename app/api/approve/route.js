//api/approve/route.js - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
import { batchUpdateSheet, getSheetData } from '../config'; // ‚úÖ ‡πÉ‡∏ä‡πâ batchUpdateSheet
import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    console.log('üì• Receiving approval request...');
    
    const data = await request.json();
    
    console.log('‚úÖ Approval data received:', {
      recordId: data.recordId,
      status: data.status,
      hasAdminNote: !!data.adminNote,
      approvedBy: data.approvedBy
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!data.recordId || !data.status) {
      return NextResponse.json(
        { message: 'Missing required fields: recordId and status' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ status ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!['approved', 'rejected', 'pending'].includes(data.status)) {
      return NextResponse.json(
        { message: 'Invalid status. Must be: approved, rejected, or pending' },
        { status: 400 }
      );
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å sheet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ row ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
    console.log('üîç Finding record in sheet...');
    const sheetData = await getSheetData('record!A:V'); // ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° columns ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    if (!sheetData || !sheetData.length) {
      return NextResponse.json(
        { message: 'No data found in sheet' },
        { status: 404 }
      );
    }

    // ‡∏´‡∏≤ row ‡∏ó‡∏µ‡πà‡∏°‡∏µ recordId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (column A)
    const rowIndex = sheetData.findIndex((row, index) => {
      if (index === 0) return false; // ‡∏Ç‡πâ‡∏≤‡∏° header row
      return row[0] === data.recordId; // column A ‡∏Ñ‡∏∑‡∏≠ Record ID
    });

    if (rowIndex === -1) {
      return NextResponse.json(
        { message: `Record with ID ${data.recordId} not found` },
        { status: 404 }
      );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì row number ‡πÉ‡∏ô Google Sheet (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1, ‡∏ö‡∏ß‡∏Å 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ header)
    const googleSheetRowNumber = rowIndex + 1;

    console.log(`üìù Updating row ${googleSheetRowNumber} with status: ${data.status}`);

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
    const currentDateTime = new Date().toISOString();
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ batch update ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    const updates = [
      {
        range: `record!S${googleSheetRowNumber}`, // Column S: Status
        values: [[data.status]]
      },
      {
        range: `record!T${googleSheetRowNumber}`, // Column T: Admin Note
        values: [[data.adminNote || '']]
      },
      {
        range: `record!U${googleSheetRowNumber}`, // Column U: Approved Date
        values: [[currentDateTime]]
      },
      {
        range: `record!V${googleSheetRowNumber}`, // Column V: Approved By
        values: [[data.approvedBy || 'SHE']]
      }
    ];

    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å field ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ batch update
    await batchUpdateSheet(updates);

    const responseData = {
      recordId: data.recordId,
      status: data.status,
      adminNote: data.adminNote || null,
      approvedDate: currentDateTime,
      approvedBy: data.approvedBy || 'SHE',
      updatedRow: googleSheetRowNumber
    };

    console.log('‚úÖ Approval successful:', responseData);

    return NextResponse.json({ 
      message: `Record ${data.status} successfully`,
      data: responseData
    }, { status: 200 });

  } catch (error) {
    console.error('‚ùå Approval API Error:', error);
    return NextResponse.json(
      { message: 'Error updating record status', error: error.message },
      { status: 500 }
    );
  }
}

// GET method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const recordId = searchParams.get('recordId');

    if (!recordId) {
      return NextResponse.json(
        { message: 'Missing recordId parameter' },
        { status: 400 }
      );
    }

    console.log(`üîç Getting status for record: ${recordId}`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sheet
    const sheetData = await getSheetData('record!A:V');
    
    if (!sheetData || !sheetData.length) {
      return NextResponse.json(
        { message: 'No data found in sheet' },
        { status: 404 }
      );
    }

    // ‡∏´‡∏≤ record ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const record = sheetData.find((row, index) => {
      if (index === 0) return false; // ‡∏Ç‡πâ‡∏≤‡∏° header
      return row[0] === recordId;
    });

    if (!record) {
      return NextResponse.json(
        { message: `Record with ID ${recordId} not found` },
        { status: 404 }
      );
    }

    const recordData = {
      recordId: record[0],
      status: record[18] || 'pending', // Column S (index 18)
      adminNote: record[19] || null,   // Column T (index 19)
      approvedDate: record[20] || null, // Column U (index 20)
      approvedBy: record[21] || null,   // Column V (index 21)
      employeeName: record[3],          // Column D (index 3)
      department: record[5],            // Column F (index 5)
      submittedDate: record[1]          // Column B (index 1)
    };

    return NextResponse.json({ 
      message: 'Record found',
      data: recordData
    }, { status: 200 });

  } catch (error) {
    console.error('‚ùå Get Record API Error:', error);
    return NextResponse.json(
      { message: 'Error getting record status', error: error.message },
      { status: 500 }
    );
  }
}